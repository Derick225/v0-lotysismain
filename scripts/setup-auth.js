#!/usr/bin/env node

/**
 * Script pour configurer le syst√®me d'authentification Lotysis
 * Ex√©cute les migrations Supabase et configure les politiques RLS
 */

const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  console.error('Assurez-vous que NEXT_PUBLIC_SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY sont d√©finies')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function setupAuth() {
  console.log('üîß Configuration du syst√®me d\'authentification Lotysis...\n')

  try {
    // Lire le fichier de migration
    const migrationPath = path.join(__dirname, '..', 'supabase', 'migrations', '20241215000001_auth_system.sql')
    
    if (!fs.existsSync(migrationPath)) {
      console.error('‚ùå Fichier de migration non trouv√©:', migrationPath)
      process.exit(1)
    }

    const migrationSQL = fs.readFileSync(migrationPath, 'utf8')
    
    console.log('üìÑ Ex√©cution de la migration de base de donn√©es...')
    
    // Diviser le SQL en commandes individuelles
    const commands = migrationSQL
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'))

    let successCount = 0
    let errorCount = 0

    for (const command of commands) {
      try {
        const { error } = await supabase.rpc('exec_sql', { sql: command })
        if (error) {
          console.warn(`‚ö†Ô∏è  Avertissement lors de l'ex√©cution de la commande: ${error.message}`)
          errorCount++
        } else {
          successCount++
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Erreur lors de l'ex√©cution de la commande: ${error.message}`)
        errorCount++
      }
    }

    console.log(`‚úÖ Migration termin√©e: ${successCount} commandes r√©ussies, ${errorCount} erreurs/avertissements\n`)

    // V√©rifier que les tables ont √©t√© cr√©√©es
    console.log('üîç V√©rification des tables cr√©√©es...')
    
    const tables = ['profiles', 'user_preferences', 'user_sessions', 'login_attempts', 'password_reset_tokens']
    
    for (const table of tables) {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1)
      
      if (error) {
        console.error(`‚ùå Erreur lors de la v√©rification de la table ${table}:`, error.message)
      } else {
        console.log(`‚úÖ Table ${table} cr√©√©e avec succ√®s`)
      }
    }

    // V√©rifier les politiques RLS
    console.log('\nüîí V√©rification des politiques RLS...')
    
    const { data: policies, error: policiesError } = await supabase
      .rpc('get_policies')
    
    if (policiesError) {
      console.warn('‚ö†Ô∏è  Impossible de v√©rifier les politiques RLS:', policiesError.message)
    } else {
      console.log(`‚úÖ ${policies?.length || 0} politiques RLS configur√©es`)
    }

    // Cr√©er un utilisateur admin par d√©faut si n√©cessaire
    console.log('\nüë§ Configuration de l\'utilisateur administrateur...')
    
    const adminEmail = 'admin@lotysis.com'
    const adminPassword = 'Admin123!@#'
    
    const { data: existingAdmin, error: checkError } = await supabase
      .from('profiles')
      .select('id')
      .eq('email', adminEmail)
      .single()
    
    if (checkError && checkError.code !== 'PGRST116') {
      console.error('‚ùå Erreur lors de la v√©rification de l\'admin:', checkError.message)
    } else if (!existingAdmin) {
      // Cr√©er l'utilisateur admin
      const { data: authData, error: authError } = await supabase.auth.admin.createUser({
        email: adminEmail,
        password: adminPassword,
        email_confirm: true,
        user_metadata: {
          full_name: 'Administrateur Lotysis',
          role: 'admin'
        }
      })
      
      if (authError) {
        console.error('‚ùå Erreur lors de la cr√©ation de l\'admin:', authError.message)
      } else {
        console.log('‚úÖ Utilisateur administrateur cr√©√©')
        console.log(`üìß Email: ${adminEmail}`)
        console.log(`üîë Mot de passe: ${adminPassword}`)
        console.log('‚ö†Ô∏è  Changez ce mot de passe apr√®s la premi√®re connexion!')
      }
    } else {
      console.log('‚úÖ Utilisateur administrateur d√©j√† existant')
    }

    console.log('\nüéâ Configuration du syst√®me d\'authentification termin√©e avec succ√®s!')
    console.log('\nüìã Prochaines √©tapes:')
    console.log('1. D√©marrez l\'application: npm run dev')
    console.log('2. Acc√©dez √† /auth/login pour vous connecter')
    console.log('3. Utilisez les identifiants admin pour acc√©der au panneau d\'administration')
    console.log('4. Configurez les param√®tres de l\'application selon vos besoins')

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error)
    process.exit(1)
  }
}

// Fonction pour cr√©er la fonction exec_sql si elle n'existe pas
async function createExecSqlFunction() {
  const createFunctionSQL = `
    CREATE OR REPLACE FUNCTION exec_sql(sql text)
    RETURNS void AS $$
    BEGIN
      EXECUTE sql;
    END;
    $$ LANGUAGE plpgsql SECURITY DEFINER;
  `
  
  try {
    const { error } = await supabase.rpc('exec', { sql: createFunctionSQL })
    if (error) {
      console.log('Note: Fonction exec_sql d√©j√† existante ou non n√©cessaire')
    }
  } catch (error) {
    // Ignorer les erreurs de cr√©ation de fonction
  }
}

// Fonction pour obtenir les politiques RLS
async function createGetPoliciesFunction() {
  const createFunctionSQL = `
    CREATE OR REPLACE FUNCTION get_policies()
    RETURNS TABLE(schemaname text, tablename text, policyname text) AS $$
    BEGIN
      RETURN QUERY
      SELECT 
        pol.schemaname::text,
        pol.tablename::text,
        pol.policyname::text
      FROM pg_policies pol
      WHERE pol.schemaname = 'public';
    END;
    $$ LANGUAGE plpgsql SECURITY DEFINER;
  `
  
  try {
    const { error } = await supabase.rpc('exec', { sql: createFunctionSQL })
    if (error) {
      console.log('Note: Fonction get_policies d√©j√† existante ou non n√©cessaire')
    }
  } catch (error) {
    // Ignorer les erreurs de cr√©ation de fonction
  }
}

// Ex√©cuter le script
if (require.main === module) {
  createExecSqlFunction()
    .then(() => createGetPoliciesFunction())
    .then(() => setupAuth())
    .catch(error => {
      console.error('‚ùå Erreur fatale:', error)
      process.exit(1)
    })
}

module.exports = { setupAuth }
